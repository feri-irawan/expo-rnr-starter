import { toast } from '@/common/components/ui/toast';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import z from 'zod';
import { {{camelCase name}}RequestContract } from '../api/contracts/{{kebabCase name}}.contract';
import use{{pascalCase name}}Mutation from '../mutations/use{{pascalCase name}}Mutation';

const formSchema = {{camelCase name}}RequestContract;
type FormSchema = z.infer<typeof formSchema>;

const use{{pascalCase name}}Form = () => {
  const { t } = useTranslation();
  const {{camelCase name}}Mutation = use{{pascalCase name}}Mutation();

  const form = useForm<FormSchema>({
    resolver: zodResolver(formSchema),
  });

  const handleSubmit = form.handleSubmit((data) => {
    {{camelCase name}}Mutation.mutate(data, {
      onSuccess: () => {
        toast.success(t('common.success'));
      },
      onError: (error) => {
        toast.error(error.message || t('common.failed'));
      },
    });
  });

  return {
    ...form,
    handleSubmit,
    isPending: {{camelCase name}}Mutation.isPending,
  };
};

export default use{{pascalCase name}}Form;
